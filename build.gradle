plugins {
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
}

group = 'com.mindplates'
version = 'v2.1.3'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

springBoot {
    buildInfo()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation 'org.modelmapper:modelmapper:3.1.1'
    implementation 'org.springframework.security:spring-security-messaging'
    implementation 'org.springframework:spring-messaging'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.apache.commons:commons-lang3'
    implementation platform("org.springframework.ai:spring-ai-bom:1.0.0-SNAPSHOT")
    implementation 'org.springframework.ai:spring-ai-openai'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    implementation 'io.sentry:sentry-logback:5.6.1'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.1'
    implementation 'com.sun.activation:jakarta.activation:1.2.2'
}

jar {
    enabled = true
}

tasks.named('test') {
    useJUnitPlatform()
}

def appDir = "$projectDir/app"
def fileName = "${rootProject.name}-${version}"

task prepareRelease {
    dependsOn "clean", "bootJar"
    bootJar.mustRunAfter(clean)
    doFirst {
        println "prepare release"
    }
    doLast {
        println "create $buildDir/release"
        mkdir "$buildDir/release"
        mkdir "$buildDir/release/conf"
        mkdir "$buildDir/release/bin"
        mkdir "$buildDir/release/logs"
        mkdir "$buildDir/dist"

        copy {
            from "$projectDir/files/application.properties"
            into "$buildDir/release/conf/"
        }
        copy {
            from "$projectDir/files/start.sh"
            into "$buildDir/release/"
            filter { line -> line.replaceAll('__fileName__', fileName) }
        }
        copy {
            from "$projectDir/files/stop.sh"
            into "$buildDir/release/"
            filter { line -> line.replaceAll('__fileName__', fileName) }
        }
        copy {
            from "$projectDir/files/status.sh"
            into "$buildDir/release/"
            filter { line -> line.replaceAll('__fileName__', fileName) }
        }
        copy {
            from "$projectDir/files/start.bat"
            into "$buildDir/release/"
            filter { line -> line.replaceAll('__fileName__', fileName) }
        }
        copy {
            from "$projectDir/files/stop.bat"
            into "$buildDir/release/"
            filter { line -> line.replaceAll('__fileName__', fileName) }
        }
        copy {
            from "$projectDir/files/status.bat"
            into "$buildDir/release/"
            filter { line -> line.replaceAll('__fileName__', fileName) }
        }
        copy {
            from "$buildDir/libs/${fileName}.jar"
            into "$buildDir/release/bin/"
        }
    }
}

task npmInstallApp(type: Exec) {
    doFirst {
        println "npm install --legacy-peer-deps"
    }
    workingDir "$appDir"
    inputs.dir "$appDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "audit", "fix"
        commandLine 'npm.cmd', 'install', "--legacy-peer-deps"
    } else {
        commandLine "npm", "audit", "fix"
        commandLine 'npm', 'install', "--legacy-peer-deps"
    }
}

task buildReact(type: Exec) {
    doFirst {
        println "npm build"
    }
    dependsOn "npmInstallApp"
    workingDir "$appDir"
    inputs.dir "$appDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "run-script", "build"
    } else {
        commandLine "npm", "run-script", "build"
    }
}

task cleanStatic(type: Delete) {
    delete files("$projectDir/src/main/resources/static")
}

task deployStatic(type: Copy) {
    dependsOn "cleanStatic"
    from "$appDir/build"
    into "$projectDir/src/main/resources/static"
}

task buildApp {
    doFirst {
        println "start app build"
    }
    deployStatic.mustRunAfter(cleanStatic)
    cleanStatic.mustRunAfter(buildReact)
    buildReact.mustRunAfter(npmInstallApp)
    dependsOn "npmInstallApp", "buildReact", "cleanStatic", "deployStatic"
    doLast {
        println "done app build"
    }
}

task release(type: Zip) {
    doFirst {
        println "start release"
    }
    dependsOn "buildApp", "prepareRelease"
    prepareRelease.mustRunAfter(buildApp)
    archiveFileName = "${fileName}.zip"
    destinationDirectory = file("$buildDir/dist")
    from "$buildDir/release"
}
